import telebot
import numpy as np
from collections import Counter

TOKEN = "7789180148:AAHzAdGMxWS3IWXkk-VoVpP8zoAsGkITALQ"
bot = telebot.TeleBot(TOKEN)

# L∆∞u l·ªãch s·ª≠ k·∫øt qu·∫£ T√†i/X·ªâu v√† t·ªïng ƒëi·ªÉm x√∫c x·∫Øc
history = []
dice_totals = []

# X√°c ƒë·ªãnh m·∫´u c·∫ßu ph·ªï bi·∫øn
def detect_pattern():
    if len(history) < 6:
        return "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch c·∫ßu!"

    last_6 = history[-6:]

    # C·∫ßu b·ªát d√†i (t·ª´ 5 l·∫ßn tr·ªü l√™n)
    if len(set(last_6[-5:])) == 1:
        return f"C·∫ßu b·ªát d√†i: {last_6[-1]}"

    # C·∫ßu nh·∫£y ƒë∆°n (1-1)
    if all(last_6[i] != last_6[i+1] for i in range(5)):
        return "C·∫ßu nh·∫£y ƒë∆°n (1-1)"

    # C·∫ßu nh·∫£y ƒë√¥i (2-2)
    if last_6[:2] == [last_6[0]] * 2 and last_6[2:4] == [last_6[2]] * 2 and last_6[4:] == [last_6[4]] * 2:
        return "C·∫ßu nh·∫£y ƒë√¥i (2-2)"

    # C·∫ßu nh·∫£y ba (3-3)
    if last_6[:3] == [last_6[0]] * 3 and last_6[3:] == [last_6[3]] * 3:
        return "C·∫ßu nh·∫£y ba (3-3)"

    # C·∫ßu ƒë·∫£o 1
    if last_6[0] == last_6[1] and last_6[2] != last_6[1] and last_6[3] == last_6[4] and last_6[5] != last_6[4]:
        return "C·∫ßu ƒë·∫£o 1"

    # C·∫ßu 3-2-1
    if last_6[:3] == [last_6[0]] * 3 and last_6[3:5] == [last_6[3]] * 2 and last_6[5] != last_6[3]:
        return "C·∫ßu 3-2-1"

    # C·∫ßu 1-2-3
    if last_6[0] != last_6[1] and last_6[1] == last_6[2] and last_6[3:6] == [last_6[3]] * 3:
        return "C·∫ßu 1-2-3"

    # C·∫ßu 1-3-2
    if last_6[:1] == [last_6[0]] * 1 and last_6[1:4] == [last_6[1]] * 3 and last_6[4:] != last_6[4]:
        return "C·∫ßu 1-3-2"

    # C·∫ßu 4-1
    if last_6[:4] == [last_6[0]] * 4 and last_6[4:] == [last_6[4]] * 1:
        return "C·∫ßu 4-1"

    # C·∫ßu tƒÉng d·∫ßn (T√†i - X·ªâu - T√†i - X·ªâu - ‚Ä¶)
    if last_6[0] != last_6[1] and last_6[2] != last_6[3] and last_6[4] != last_6[5]:
        return "C·∫ßu tƒÉng d·∫ßn"

    # C·∫ßu gi·∫£m d·∫ßn (X·ªâu - T√†i - X·ªâu - T√†i - ‚Ä¶)
    if last_6[0] == last_6[1] and last_6[2] == last_6[3] and last_6[4] == last_6[5]:
        return "C·∫ßu gi·∫£m d·∫ßn"

    # C·∫ßu l·∫∑p l·∫°i chu k·ª≥ 3 phi√™n
    if history[-6:] == history[-12:-6]:
        return "C·∫ßu l·∫∑p l·∫°i (Chu k·ª≥ 3 phi√™n)"
    
    # C·∫ßu nh·ªãp 1-2-1
    if len(last_6) >= 3:
        if last_6[-3:] == ["T√†i", "X·ªâu", "X·ªâu"]:
            return "Nh·ªãp 1-2-1 - D·ª± ƒëo√°n T√†i"
        elif last_6[-3:] == ["X·ªâu", "T√†i", "T√†i"]:
            return "Nh·ªãp 1-2-1 - D·ª± ƒëo√°n X·ªâu"
        
    # C·∫ßu ƒë·∫£o
    if len(set(last_6)) == 2 and all(last_6[i] != last_6[i + 1] for i in range(5)):
        return "C·∫ßu ƒë·∫£o (ƒê·∫£o ng∆∞·ª£c k·∫øt qu·∫£)"  
    
    # C·∫ßu b·ªát (5 l·∫ßn li√™n ti·∫øp c√πng k·∫øt qu·∫£)
    if len(set(last_6[:3])) == 1:
        return f"C·∫ßu b·ªát ƒë·∫∑c bi·ªát: {last_6[0]}"
    
    # C·∫ßu 2-1
    if len(last_6) >= 3:
        if last_6[:2] == ["T√†i", "T√†i"] and last_6[2] == "X·ªâu":
            return "C·∫ßu 2-1 - D·ª± ƒëo√°n T√†i"
        elif last_6[:2] == ["X·ªâu", "X·ªâu"] and last_6[2] == "T√†i":
            return "C·∫ßu 2-1 - D·ª± ƒëo√°n X·ªâu"
        

    # C·∫ßu 3-1
    if len(last_6) >= 4:
        if last_6[:3] == ["T√†i", "T√†i", "T√†i"] and last_6[3] == "X·ªâu":
            return "C·∫ßu 3-1 - D·ª± ƒëo√°n T√†i"
        elif last_6[:3] == ["X·ªâu", "X·ªâu", "X·ªâu"] and last_6[3] == "T√†i":
            return "C·∫ßu 3-1 - D·ª± ƒëo√°n X·ªâu"

    # C·∫ßu ƒë·∫£o 1-2
    if len(last_6) >= 4:
        if last_6[0] != last_6[1] and last_6[1] != last_6[2] and last_6[2] != last_6[3] and last_6[3] != last_6[4]:
            return "C·∫ßu ƒë·∫£o 1-2 (T√†i - X·ªâu thay phi√™n)"       

    return "Kh√¥ng ph√°t hi·ªán c·∫ßu r√µ r√†ng!"

# Ki·ªÉm tra c·∫ßu ƒë·∫∑c bi·ªát (s·ªë l·∫ª = X·ªâu, s·ªë ch·∫µn = T√†i)
def special_case(dice_total):
    if dice_total % 2 == 0:
        return "T√†i"
    else:
        return "X·ªâu"

# T√≠nh x√°c su·∫•t d·ª± ƒëo√°n d·ª±a tr√™n l·ªãch s·ª≠
def calculate_probability():
    if len(history) < 5:
        return "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh x√°c su·∫•t!"

    count_tai = history.count("T√†i")
    count_xiu = history.count("X·ªâu")
    prob_tai = round((count_tai / len(history)) * 100, 2)
    prob_xiu = round((count_xiu / len(history)) * 100, 2)

    return f"X√°c su·∫•t: T√†i {prob_tai}% - X·ªâu {prob_xiu}%"

# Ph√¢n t√≠ch t·ªïng x√∫c x·∫Øc v√† xu h∆∞·ªõng
def analyze_dice_totals():
    if len(dice_totals) < 3:
        return "Ch∆∞a ƒë·ªß d·ªØ li·ªáu t·ªïng x√∫c x·∫Øc ƒë·ªÉ ph√¢n t√≠ch!"

    avg_total = np.mean(dice_totals)
    most_common = Counter(dice_totals).most_common(1)[0][0]
    
    trend = "Xu h∆∞·ªõng: "
    if avg_total > 10.5:
        trend += "Nghi√™ng v·ªÅ T√†i"
    else:
        trend += "Nghi√™ng v·ªÅ X·ªâu"

    return f"Trung b√¨nh t·ªïng: {avg_total:.2f}\nS·ªë xu·∫•t hi·ªán nhi·ªÅu nh·∫•t: {most_common}\n{trend}"

# Ng∆∞·ªùi d√πng nh·∫≠p t·ªïng 3 vi√™n x√∫c x·∫Øc (t·ª± ƒë·ªông ƒë·ªïi th√†nh T√†i/X·ªâu)
@bot.message_handler(func=lambda message: message.text.isdigit() and 3 <= int(message.text) <= 18)
def receive_dice_total(message):
    total = int(message.text)
    dice_totals.append(total)
    if len(dice_totals) > 10:
        dice_totals.pop(0)

    # T√≠nh to√°n x√°c su·∫•t v√† c·∫ßu
    result = special_case(total)  # √Åp d·ª•ng c·∫ßu ƒë·∫∑c bi·ªát (s·ªë l·∫ª l√† X·ªâu, s·ªë ch·∫µn l√† T√†i)
    history.append(result)
    if len(history) > 10:
        history.pop(0)

    # X·ª≠ l√Ω n·∫øu c·∫ßu kh√¥ng x√°c ƒë·ªãnh ho·∫∑c x√°c su·∫•t g·∫ßn 50-50
    probability = calculate_probability()
    if probability == "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh x√°c su·∫•t!" or abs(history.count("T√†i") - history.count("X·ªâu")) < 2:
        result = special_case(total)  # L·∫•y k·∫øt qu·∫£ c·∫ßu ƒë·∫∑c bi·ªát n·∫øu kh√¥ng c√≥ xu h∆∞·ªõng r√µ r√†ng

    dice_analysis = analyze_dice_totals()
    pattern = detect_pattern()

    bot.send_message(message.chat.id, f"üé≤ ƒê√£ l∆∞u t·ªïng x√∫c x·∫Øc: {total} ({result})\n{dice_analysis}\n{pattern}\n{probability}")

# X·ª≠ l√Ω l·ªánh /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "üé≤ Ch√†o m·ª´ng b·∫°n! Nh·∫≠p t·ªïng 3 vi√™n x√∫c x·∫Øc (3-18) ƒë·ªÉ ph√¢n t√≠ch.")

# X·ª≠ l√Ω l·ªánh /reset
@bot.message_handler(commands=['reset'])
def reset_data(message):
    global history, dice_totals
    history = []  # X√≥a l·ªãch s·ª≠ k·∫øt qu·∫£ T√†i/X·ªâu
    dice_totals = []  # X√≥a t·ªïng x√∫c x·∫Øc
    bot.send_message(message.chat.id, "üö® ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥. H√£y nh·∫≠p l·∫°i t·ªïng 3 vi√™n x√∫c x·∫Øc ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

@bot.message_handler(commands=['history'])
def show_history(message):
    if not history:
        bot.send_message(message.chat.id, "üö® L·ªãch s·ª≠ ch∆∞a c√≥ d·ªØ li·ªáu.")
    else:
        history_text = "\n".join(f"{i+1}. {result}" for i, result in enumerate(history))
        bot.send_message(message.chat.id, f"üìú L·ªãch s·ª≠ c√°c phi√™n:\n{history_text}")

# Ch·∫°y bot
bot.polling()